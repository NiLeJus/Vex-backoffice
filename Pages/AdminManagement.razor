
@page "/admin-management"
@inject IJSRuntime JS
@inject NavigationManager Navigation

<PageTitle>Admin Management</PageTitle>

<h1>Admin Management</h1>

<div class="accordion" id="accordionExample">
    <div class="accordion-item">
        <h2 class="accordion-header">
            <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                Create Admin
            </button>
        </h2>
        <div id="collapseOne" class="accordion-collapse collapse show" data-bs-parent="#accordionExample">
            <EditForm Model="newAdminModel" OnValidSubmit="HandleNewAdmin">
                <div class="row align-items-end p-2 ">
                    <div class="col-auto">
                        <InputText @bind-Value="newAdminModel.Email" type="email" class="form-control" placeholder="Email" />
                    </div>
                    <div class="col-auto">
                        <button type="submit" class="btn btn-success" >Create</button>
                    </div>
                </div>
            </EditForm>
        </div>

    </div>
    <div class="accordion-item">
        <h2 class="accordion-header">
            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
                Manage Created Admin
            </button>
        </h2>
        <div id="collapseTwo" class="accordion-collapse collapse w-100" data-bs-parent="#accordionExample">
            <ul class="list-group w-100 ">
                @if (admins is null)
                {
                    <li>Chargement...</li>
                }
                else
                {
                    @foreach (var admin in admins)
                    {
                        <li class="justify-content-between list-group-item d-flex flex-row  @(!admin.IsCreated ? "list-group-item-warning " : "ma-classe-inactive")">@admin.Email (@admin.id)

                            @if (!admin.IsCreated)
                            {
                                <p>
                                Needs to register
                                </p>
                            }

                            <div class="btn-group" role="group" aria-label="Admin actions">
                                <button class="btn btn-danger btn-sm ms-2" @onclick="() => DeleteAdmin(admin.id)">Supprimer</button>
                            </div>
                        </li>
                        }
                    }
                </ul>
        </div>
    </div>
</div>

@code {
    private NewAdminModel newAdminModel = new();
    private string errorMessage;
    private string adminData;
    private List<AdminModel> admins;

    protected override async Task OnInitializedAsync()
    {
        // Check user auth
        var isAuth = await JS.InvokeAsync<string>("localStorage.getItem", "isAuthenticated");
        if (isAuth != "true")
        {
            Navigation.NavigateTo("/", true);
        }
        admins = await JS.InvokeAsync<List<AdminModel>>("getAdmins");
        
    }

    public class NewAdminModel
    {
        public string Email { get; set; }
    }


    public class AdminModel
    {
        public string id { get; set; }
        public string Email { get; set; }
        public bool IsCreated { get; set; }
    }

    private async Task HandleNewAdmin()
    {
        errorMessage = null;
        adminData = null;

        var result = await JS.InvokeAsync<AdminOperationResult>("registerNewAdmin", newAdminModel.Email);

        if (result != null && result.success)
        {
            // Recharge la liste
            admins = await JS.InvokeAsync<List<AdminModel>>("getAdmins");
            newAdminModel = new NewAdminModel(); 
            StateHasChanged();
        }
        else
        {
            errorMessage = result?.error ?? "Erreur inconnue";
        }
    }



    public class AdminOperationResult
    {
        public bool success { get; set; }
        public string error { get; set; }
    }

    private async Task DeleteAdmin(string adminId)
    {
        Console.WriteLine($"Suppression admin {adminId}");
        var result = await JS.InvokeAsync<DeleteResult>("deleteAdminById", adminId);

        Console.WriteLine($"Résultat suppression: {result?.success} {result?.error}");

        if (result != null && result.success)
        {
            admins = await JS.InvokeAsync<List<AdminModel>>("getAdmins");
            StateHasChanged();
        }
        else
        {
            errorMessage = result?.error ?? "Erreur inconnue lors de la suppression.";
        }
    }


    public class DeleteResult
    {
        public bool success { get; set; }
        public string error { get; set; }
    }

}
